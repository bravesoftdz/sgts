unit SgtsMTScheduleFrm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, ToolWin, ImgList, ExtCtrls, Grids, DBGrids, DB, Menus,
  SgtsDbGrid, SgtsDatabaseCDS, SgtsCoreIntf, SgtsCDS,
  SgtsDataInsertFm, SgtsDataUpdateFm, SgtsDataDelete, SgtsDataFmIntf,
  SgtsDataFm, SgtsDataIfaceIntf, SgtsExecuteDefs, SgtsGetRecordsConfig, SgtsMenus,
  SgtsConfigIntf, StdCtrls, CheckLst;

type
  TSgtsMTScheduleFrame = class(TFrame)
    Panel2: TPanel;
    Splitter1: TSplitter;
    Panel1: TPanel;
    Splitter2: TSplitter;
    Panel3: TPanel;
    CheckListBox1: TCheckListBox;
  private
    { Private declarations }
    FCoreIntf: ISgtsCore;
    FDataSet: TSgtsDatabaseCDS;
    FYear: Integer;

  public
    { Public declarations }
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

    procedure InitByCore(ACoreIntf: ISgtsCore);

    procedure CloseData; virtual;
    procedure OpenData;

    property DataSet: TSgtsDatabaseCDS read FDataSet;
    property Year: Integer write FYear;
  end;

implementation

{$R *.dfm}


constructor TSgtsMTScheduleFrame.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FDataSet:=TSgtsDatabaseCDS.Create(nil);
end;

destructor TSgtsMTScheduleFrame.Destroy;
begin
  FDataSet.Free;
  inherited Destroy;
end;

procedure TSgtsMTScheduleFrame.InitByCore(ACoreIntf: ISgtsCore);
begin
  FCoreIntf:=ACoreIntf;
  FDataSet.InitByCore(ACoreIntf);
end;



procedure TSgtsMTScheduleFrame.CloseData;
begin
  if FDataSet.Active then
    FDataSet.Close;
end;

procedure TSgtsMTScheduleFrame.OpenData;
begin
  if not FDataSet.Active then begin
    try
      FDataSet.Open;
    except
      on E: Exception do
        //ShowError(E.Message);
    end;
  end;
  //Edit1.Text:=FDataSet.FieldByName('ROUTE_NAME').AsString;

end;
end.
