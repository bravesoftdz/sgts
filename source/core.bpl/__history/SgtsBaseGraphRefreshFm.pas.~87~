unit SgtsBaseGraphRefreshFm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms, Menus,
  Dialogs, StdCtrls, ExtCtrls, ComCtrls, DBClient, DB, DateUtils, CheckLst, Contnrs,
  SgtsGraphRefreshFm, SgtsFm, SgtsCoreIntf, SgtsGraphIfaceIntf, SgtsGraphChartFm,
  SgtsDateEdit, SgtsControls, SgtsGraphChartSeriesDefs, SgtsPeriodFm, SgtsIface,
  SgtsSelectDefs;

type
  TSgtsBaseGraphAxisParamType=(aptLine,aptPoint,aptBar,aptArea,aptLinePoint);

  TSgtsBaseGraphAxisParam=class(TObject)
  private
    FName: String;
    FChecked: Boolean;
    FGroup: Integer;
    FFieldName: String;
    FParamType: TSgtsBaseGraphAxisParamType;
    FXMerging: Boolean;
    FUseFilter: Boolean;
    FLabelFieldName: String;
    FFunctType: TSgtsSelectDefFuncType;
    FProviderName: String;
    FRelationship: String;
  public
    constructor Create;
    property Name: String read FName write FName;
    property Checked: Boolean read FChecked write FChecked;
    property Group: Integer read FGroup write FGroup;
    property FieldName: String read FFieldName write FFieldName;
    property ParamType: TSgtsBaseGraphAxisParamType read FParamType write FParamType;
    property XMerging: Boolean read FXMerging write FXMerging;
    property UseFilter: Boolean read FUseFilter write FUseFilter;
    property LabelFieldName: String read FLabelFieldName write FLabelFieldName;
    property FunctType: TSgtsSelectDefFuncType read FFunctType write FFunctType;
    property ProviderName: String read FProviderName write FProviderName;
    property Relationship: String read FRelationship write FRelationship;  
  end;

  TSgtsBaseGraphAxisParams=class(TObjectList)
  private
    function GetItems(Index: Integer): TSgtsBaseGraphAxisParam;
    procedure SetItems(Index: Integer; Value: TSgtsBaseGraphAxisParam);
  public
    function Add(Name, FieldName: String; Group: Integer=-1; UseFilter: Boolean=false): TSgtsBaseGraphAxisParam;

    procedure CopyFrom(Source: TSgtsBaseGraphAxisParams; WithClear: Boolean=true; WithGroup: Boolean=true);

    function GetFirstCheckGroup: Integer;
    function GetFirstCheck: TSgtsBaseGraphAxisParam;
    procedure CheckAll;
    procedure UnCheckAll;
    function CheckCount: Integer;
    procedure LoadFromStream(Stream: TStream);
    procedure SaveToStream(Stream: TStream);
    function GetParamsStr: String;
    procedure SetParamsStr(Value: String);

    procedure FalseUseFilter;

    property Items[Index: Integer]: TSgtsBaseGraphAxisParam read GetItems write SetItems;
  end;

  TSgtsBaseGraphRefreshIface=class;

  TSgtsBaseGraphRefreshForm = class(TSgtsGraphRefreshForm)
    PanelType: TPanel;
    GroupBoxType: TGroupBox;
    ButtonDefault: TButton;
    PopupMenuParams: TPopupMenu;
    MenuItemParamCheckAll: TMenuItem;
    MenuItemParamUnCheckAll: TMenuItem;
    EditName: TEdit;
    PanelAxis: TPanel;
    GroupBoxAxis: TGroupBox;
    PanelAxis2: TPanel;
    TabControlAxis: TTabControl;
    CheckListBoxParams: TCheckListBox;
    procedure ButtonDefaultClick(Sender: TObject);
    procedure ButtonOkClick(Sender: TObject);
    procedure TabControlAxisChange(Sender: TObject);
    procedure CheckListBoxParamsClickCheck(Sender: TObject);
    procedure MenuItemParamCheckAllClick(Sender: TObject);
    procedure MenuItemParamUnCheckAllClick(Sender: TObject);
    procedure CheckListBoxParamsDblClick(Sender: TObject);
  private
    FCurrenAxisParams: TSgtsBaseGraphAxisParams;
    FLeftAxisParams: TSgtsBaseGraphAxisParams;
    FRightAxisParams: TSgtsBaseGraphAxisParams;
    FBottomAxisParams: TSgtsBaseGraphAxisParams;

    function GetIface: TSgtsBaseGraphRefreshIface;
    procedure FillParams(Index: Integer);
    function GetAxisParams(Index: Integer): TSgtsBaseGraphAxisParams;
    function CheckRelationship(AxisParams: TSgtsBaseGraphAxisParams; Param: TSgtsBaseGraphAxisParam): Boolean;
    procedure CheckParams(Index: Integer);

  public
    constructor Create(ACoreIntf: ISgtsCore); override;
    destructor Destroy; override;
    procedure Default; virtual;

    property Iface: TSgtsBaseGraphRefreshIface read GetIface;
  end;

  TSgtsBaseGraphRefreshIface=class(TSgtsGraphRefreshIface)
  private
    FDefaultLeftAxisParams: TSgtsBaseGraphAxisParams;
    FDefaultRightAxisParams: TSgtsBaseGraphAxisParams;
    FDefaultBottomAxisParams: TSgtsBaseGraphAxisParams;
    FLeftAxisParams: TSgtsBaseGraphAxisParams;
    FRightAxisParams: TSgtsBaseGraphAxisParams;
    FBottomAxisParams: TSgtsBaseGraphAxisParams;
    FParamLeftAxisParams: String;
    FParamRightAxisParams: String;
    FParamBottomAxisParams: String;
    FDefaultGraphName: String;
    FGraphName: String;
    FUseOtherDataSets: Boolean;

    function GetForm: TSgtsBaseGraphRefreshForm;
    procedure CreateAxisParamsByColumns;
  protected
    function GetFormClass: TSgtsFormClass; override;
    procedure AfterCreateForm(AForm: TSgtsForm); override;
    procedure BeforeShowModal; override;
    procedure AfterShowModal(ModalResult: TModalResult); override;

    property DefaultLeftAxisParams: TSgtsBaseGraphAxisParams read FDefaultLeftAxisParams;
    property DefaultRightAxisParams: TSgtsBaseGraphAxisParams read FDefaultRightAxisParams;
    property DefaultBottomAxisParams: TSgtsBaseGraphAxisParams read FDefaultBottomAxisParams;
  public
    constructor Create(ACoreIntf: ISgtsCore; AParentIface: TSgtsIface); override;
    destructor Destroy; override;

    procedure Init; override;

    procedure ReadParams(DatabaseConfig: Boolean=true); override;
    procedure WriteParams(DatabaseConfig: Boolean=true); override;

    procedure BeforeReadParams; override;
    procedure BeforeWriteParams; override;

    property LeftAxisParams: TSgtsBaseGraphAxisParams read FLeftAxisParams;
    property RightAxisParams: TSgtsBaseGraphAxisParams read FRightAxisParams;
    property BottomAxisParams: TSgtsBaseGraphAxisParams read FBottomAxisParams;

    property Form: TSgtsBaseGraphRefreshForm read GetForm;
    property DefaultGraphName: String read FDefaultGraphName write FDefaultGraphName;
    property GraphName: String read FGraphName write FGraphName;
    property UseOtherDataSets: Boolean read FUseOtherDataSets write FUseOtherDataSets;  
  end;

var
  SgtsBaseGraphRefreshForm: TSgtsBaseGraphRefreshForm;

implementation

uses SgtsUtils, SgtsConsts, SgtsDialogs, SgtsConfig,
     SgtsRbkCyclesFm, SgtsCDS, SgtsConfigIntf, SgtsBaseGraphFm;

{$R *.dfm}

{ TSgtsBaseGraphAxisParam }

constructor TSgtsBaseGraphAxisParam.Create;
begin
  inherited Create;
  FXMerging:=true;
  FUseFilter:=false;
  FGroup:=-1;
end;

{ TSgtsBaseGraphAxisParams }

function TSgtsBaseGraphAxisParams.GetItems(Index: Integer): TSgtsBaseGraphAxisParam;
begin
  Result:=TSgtsBaseGraphAxisParam(inherited Items[Index]);
end;

procedure TSgtsBaseGraphAxisParams.SetItems(Index: Integer; Value: TSgtsBaseGraphAxisParam);
begin
  inherited Items[Index]:=Value;
end;

function TSgtsBaseGraphAxisParams.Add(Name, FieldName: String; Group: Integer=-1; UseFilter: Boolean=false): TSgtsBaseGraphAxisParam;
var
  Param: TSgtsBaseGraphAxisParam;
begin
  Param:=TSgtsBaseGraphAxisParam.Create;
  Param.Name:=Name;
  Param.FieldName:=FieldName;
  Param.Group:=Group;
  Param.UseFilter:=UseFilter;
  Result:=Param;
  inherited Add(Param);
end;

procedure TSgtsBaseGraphAxisParams.CopyFrom(Source: TSgtsBaseGraphAxisParams; WithClear: Boolean=true; WithGroup: Boolean=true);
var
  i: Integer;
  Param1, Param2: TSgtsBaseGraphAxisParam;
begin
  if Assigned(Source) then begin
    if WithClear then
      Clear;
    for i:=0 to Source.Count-1 do begin
      Param1:=Source.Items[i];
      Param2:=Add(Param1.Name,Param1.FieldName,iff(WithGroup,Param1.Group,-1));
      Param2.Checked:=Param1.Checked;
      Param2.ParamType:=Param1.ParamType;
      Param2.XMerging:=Param1.XMerging;
      Param2.UseFilter:=Param1.UseFilter;
      Param2.LabelFieldName:=Param1.LabelFieldName;
      Param2.FunctType:=Param1.FunctType;
      Param2.ProviderName:=Param1.ProviderName;
      Param2.Relationship:=Param1.Relationship;
    end;
  end;
end;

function TSgtsBaseGraphAxisParams.GetFirstCheckGroup: Integer;
var
  Param: TSgtsBaseGraphAxisParam;
begin
  Result:=-2;
  Param:=GetFirstCheck;
  if Assigned(Param) then
    Result:=Param.Group;
end;

function TSgtsBaseGraphAxisParams.GetFirstCheck: TSgtsBaseGraphAxisParam;
var
  i: Integer;
begin
  Result:=nil;
  for i:=0 to Count-1 do begin
    if Items[i].Checked then begin
      Result:=Items[i];
      break;
    end;
  end;
end;

procedure TSgtsBaseGraphAxisParams.CheckAll;
var
  i: Integer;
  Group: Integer;
begin
  Group:=GetFirstCheckGroup;
  for i:=0 to Count-1 do begin
    if Group=-2 then begin
      Items[i].Checked:=true;
      Group:=Items[i].Group;
    end else begin
      if Group<>-1 then begin
        Items[i].Checked:=Group=Items[i].Group;
      end;  
    end;  
  end;  
end;

procedure TSgtsBaseGraphAxisParams.UnCheckAll;
var
  i: Integer;
begin
  for i:=0 to Count-1 do
    Items[i].Checked:=false;
end;

function TSgtsBaseGraphAxisParams.CheckCount: Integer;
var
  i: Integer;
begin
  Result:=0;
  for i:=0 to Count-1 do
    if Items[i].Checked then
      Inc(Result);
end;

procedure TSgtsBaseGraphAxisParams.LoadFromStream(Stream: TStream);
var
  Reader: TReader;
  Item: TSgtsBaseGraphAxisParam;
  S1, S2: String;
  Group: Integer;
begin
  Reader:=TReader.Create(Stream,FilerPageSize);
  try
    Reader.ReadListBegin;
    Clear;
    while not Reader.EndOfList do begin
      S1:=Reader.ReadString;
      S2:=Reader.ReadString;
      Group:=Reader.ReadInteger;
      Item:=Add(S1,S2,Group);
      if Assigned(Item) then begin
        Item.Checked:=Reader.ReadBoolean;
        Item.ParamType:=TSgtsBaseGraphAxisParamType(Reader.ReadInteger);
        Item.XMerging:=Reader.ReadBoolean;
        Item.UseFilter:=Reader.ReadBoolean;
        Item.LabelFieldName:=Reader.ReadString;
        Item.FunctType:=TSgtsSelectDefFuncType(Reader.ReadInteger);
        Item.ProviderName:=Reader.ReadString;
        Item.Relationship:=Reader.ReadString;
      end;  
    end;
    Reader.ReadListEnd;
  finally
    Reader.Free;
  end;  
end;

procedure TSgtsBaseGraphAxisParams.SaveToStream(Stream: TStream);
var
  i: Integer;
  Writer: TWriter;
  Item: TSgtsBaseGraphAxisParam;
begin
  Writer:=TWriter.Create(Stream,FilerPageSize);
  try
    Writer.WriteListBegin;
    for i:=0 to Count-1 do begin
      Item:=Items[i];
      Writer.WriteString(Item.Name);
      Writer.WriteString(Item.FieldName);
      Writer.WriteInteger(Item.Group);
      Writer.WriteBoolean(Item.Checked);
      Writer.WriteInteger(Integer(Item.ParamType));
      Writer.WriteBoolean(Item.XMerging);
      Writer.WriteBoolean(Item.UseFilter);
      Writer.WriteString(Item.LabelFieldName);
      Writer.WriteInteger(Integer(Item.FunctType));
      Writer.WriteString(Item.ProviderName);
      Writer.WriteString(Item.Relationship);
    end;
    Writer.WriteListEnd;
  finally
    Writer.Free;
  end;
end;

function TSgtsBaseGraphAxisParams.GetParamsStr: String;
var
  S: String;
  Stream: TMemoryStream;
begin
  Stream:=TMemoryStream.Create;
  try
    Result:='';
    SaveToStream(Stream);
    SetLength(S,Stream.Size);
    System.Move(Stream.Memory^,Pointer(S)^,Stream.Size);
    Result:=S;
  finally
    Stream.Free;
  end;
end;

procedure TSgtsBaseGraphAxisParams.SetParamsStr(Value: String);
var
  Stream: TMemoryStream;
  DefStream: TMemoryStream;
begin
  Stream:=TMemoryStream.Create;
  DefStream:=TMemoryStream.Create;
  try
    SaveToStream(DefStream);
    DefStream.Position:=0;
    Stream.SetSize(Length(Value));
    System.Move(Pointer(Value)^,Stream.Memory^,Length(Value));
    try
      LoadFromStream(Stream);
    except
      LoadFromStream(DefStream);
    end;
  finally
    DefStream.Free;
    Stream.Free;
  end;
end;

procedure TSgtsBaseGraphAxisParams.FalseUseFilter;
var
  i: Integer;
begin
  for i:=0 to Count-1 do begin
    Items[i].UseFilter:=false;
  end;
end;

{ TSgtsBaseGraphRefreshIface }

constructor TSgtsBaseGraphRefreshIface.Create(ACoreIntf: ISgtsCore; AParentIface: TSgtsIface);
begin
  inherited Create(ACoreIntf,AParentIface);
  StoredInConfig:=true;

  FDefaultLeftAxisParams:=TSgtsBaseGraphAxisParams.Create;
  FDefaultRightAxisParams:=TSgtsBaseGraphAxisParams.Create;
  FDefaultBottomAxisParams:=TSgtsBaseGraphAxisParams.Create;

  FLeftAxisParams:=TSgtsBaseGraphAxisParams.Create;
  FRightAxisParams:=TSgtsBaseGraphAxisParams.Create;
  FBottomAxisParams:=TSgtsBaseGraphAxisParams.Create;

  FParamLeftAxisParams:='';
  FParamRightAxisParams:='';
  FParamBottomAxisParams:='';
end;

destructor TSgtsBaseGraphRefreshIface.Destroy;
begin
  FBottomAxisParams.Free;
  FRightAxisParams.Free;
  FLeftAxisParams.Free;
  FDefaultBottomAxisParams.Free;
  FDefaultRightAxisParams.Free;
  FDefaultLeftAxisParams.Free;
  inherited Destroy;
end;

function TSgtsBaseGraphRefreshIface.GetFormClass: TSgtsFormClass;
begin
  Result:=TSgtsBaseGraphRefreshForm;
end;

function TSgtsBaseGraphRefreshIface.GetForm: TSgtsBaseGraphRefreshForm;
begin
  Result:=TSgtsBaseGraphRefreshForm(inherited Form);
end;

procedure TSgtsBaseGraphRefreshIface.Init; 
begin
  inherited Init;
  if Assigned(ParentIface) then begin
    if ParentIface is TSgtsBaseGraphIface then begin
      SectionName:=Name+InttoStr(TSgtsBaseGraphIface(ParentIface).GraphId);
      GraphName:=ParentIface.Caption;
      DefaultGraphName:=GraphName;
      CreateAxisParamsByColumns;
    end;
  end;
end;

procedure TSgtsBaseGraphRefreshIface.CreateAxisParamsByColumns;
var
  Config: TSgtsConfig;
  Columns: TStringList;
  i: Integer;
  S: String;
  IsVisible: Boolean;
  FieldName: String;
  DisplayFormat: String;
  Group: Integer;
  GraphField: String;
  UseFilter: Boolean;
  XMerging: Boolean;
  Graph: Boolean;
  LeftAxis: Boolean;
  RightAxis: Boolean;
  BottomAxis: Boolean;
  ParamType: TSgtsBaseGraphAxisParamType;
  Param: TSgtsBaseGraphAxisParam;
  FuncType: TSgtsSelectDefFuncType;
  TableName: String;
  Relationship: String;
  Flag: Boolean;
begin
  if Assigned(ParentIface) and
    (ParentIface is TSgtsBaseGraphIface) then begin
    Config:=TSgtsConfig.Create(CoreIntf);
    Columns:=TStringList.Create;
    try
      Config.LoadFromString(TSgtsBaseGraphIface(ParentIface).Columns);
      Config.ReadSection(SCutDeterminationColumns,Columns);

      LeftAxisParams.Clear;
      RightAxisParams.Clear;
      BottomAxisParams.Clear;
      
      for i:=0 to Columns.Count-1 do begin
        S:=Columns[i];
        IsVisible:=Config.Read(SCutDeterminationColumns,S,true);
        Graph:=Config.Read(S,SCutDeterminationGraph,true);
        if IsVisible and Graph then begin
          FieldName:=Trim(Config.Read(S,SCutDeterminationField,''));
          GraphField:=Trim(Config.Read(S,SCutDeterminationGraphField,''));
          DisplayFormat:=Config.Read(S,SCutDeterminationFormat,'');
          Group:=Config.Read(S,SCutDeterminationGroup,-1);
          UseFilter:=Config.Read(S,SCutDeterminationFilter,false);
          XMerging:=Config.Read(S,SCutDeterminationXMerging,true);
          TableName:=Trim(Config.Read(S,SCutDeterminationTableName,''));
          LeftAxis:=Config.Read(S,SCutDeterminationLeftAxis,true);
          LeftAxis:=LeftAxis and (Trim(TableName)='');
          RightAxis:=Config.Read(S,SCutDeterminationRightAxis,true);
          BottomAxis:=Config.Read(S,SCutDeterminationBottomAxis,true);
          BottomAxis:=BottomAxis and (Trim(TableName)='');
          ParamType:=TSgtsBaseGraphAxisParamType(Config.Read(S,SCutDeterminationGraphType,aptLine));
          FuncType:=TSgtsSelectDefFuncType(Config.Read(S,SCutDeterminationFuncType,ftNone));
          Relationship:=Config.Read(S,SCutDeterminationRelationship,'');

          Flag:=true;
          if not FUseOtherDataSets then
            Flag:=Trim(TableName)='';

          if Flag then begin
            if LeftAxis then begin
              Param:=LeftAxisParams.Add(S,FieldName,Group,UseFilter);
              if Assigned(Param) then begin
                Param.ProviderName:=TableName;
                Param.Relationship:=Relationship;
                Param.XMerging:=XMerging;
                Param.ParamType:=ParamType;
                Param.FunctType:=FuncType;
                if Trim(GraphField)<>'' then begin
                  Param.FieldName:=GraphField;
                  Param.LabelFieldName:=FieldName;
                end;
              end;
            end;
            if RightAxis then begin
              Param:=RightAxisParams.Add(S,FieldName,Group,UseFilter);
              if Assigned(Param) then begin
                Param.ProviderName:=TableName;
                Param.Relationship:=Relationship;
                Param.XMerging:=XMerging;
                Param.ParamType:=ParamType;
                Param.FunctType:=FuncType;
                if Trim(GraphField)<>'' then begin
                  Param.FieldName:=GraphField;
                  Param.LabelFieldName:=FieldName;
                end;
              end;
            end;
            if BottomAxis then begin
              Param:=BottomAxisParams.Add(S,FieldName,Group,UseFilter);
              if Assigned(Param) then begin
                Param.ProviderName:=TableName;
                Param.XMerging:=XMerging;
                Param.ParamType:=ParamType;
                Param.FunctType:=FuncType;
                if Trim(GraphField)<>'' then begin
                  Param.FieldName:=GraphField;
                  Param.LabelFieldName:=FieldName;
                end;
              end;
            end;
          end;
        end;

        DefaultLeftAxisParams.CopyFrom(LeftAxisParams);
        DefaultRightAxisParams.CopyFrom(RightAxisParams);
        DefaultBottomAxisParams.CopyFrom(BottomAxisParams);

      end;
    finally
      Columns.Free;
      Config.Free;
    end;
  end;
end;

procedure TSgtsBaseGraphRefreshIface.AfterCreateForm(AForm: TSgtsForm);
begin
  inherited AfterCreateForm(AForm);
end;

procedure TSgtsBaseGraphRefreshIface.BeforeShowModal;
begin
  inherited BeforeShowModal;
  if Assigned(Form) then begin
    Form.FLeftAxisParams.CopyFrom(FLeftAxisParams);
    Form.FRightAxisParams.CopyFrom(FRightAxisParams);
    Form.FBottomAxisParams.CopyFrom(FBottomAxisParams);
    with Form do begin
      FillParams(TabControlAxis.TabIndex);
      CheckParams(TabControlAxis.TabIndex);
    end;
    Form.EditName.Text:=iff(Trim(FGraphName)<>'',FGraphName,Form.EditName.Text);
  end;
end;

procedure TSgtsBaseGraphRefreshIface.AfterShowModal(ModalResult: TModalResult);
begin
  inherited AfterShowModal(ModalResult);
  if ModalResult=mrOk then begin
    if Assigned(Form) then begin
      FLeftAxisParams.CopyFrom(Form.FLeftAxisParams);
      FRightAxisParams.CopyFrom(Form.FRightAxisParams);
      FBottomAxisParams.CopyFrom(Form.FBottomAxisParams);
      with Form do begin
        FillParams(TabControlAxis.TabIndex);
        CheckParams(TabControlAxis.TabIndex);
      end;
      FGraphName:=Form.EditName.Text;
    end;
  end;
end;

procedure TSgtsBaseGraphRefreshIface.BeforeReadParams;
begin
  inherited BeforeReadParams;
  FDefaultLeftAxisParams.CopyFrom(FLeftAxisParams);
  FDefaultRightAxisParams.CopyFrom(FRightAxisParams);
  FDefaultBottomAxisParams.CopyFrom(BottomAxisParams);
  FParamLeftAxisParams:=FLeftAxisParams.GetParamsStr;
  FParamRightAxisParams:=FRightAxisParams.GetParamsStr;
  FParamBottomAxisParams:=FBottomAxisParams.GetParamsStr;
  FDefaultGraphName:=FGraphName;
end;

procedure TSgtsBaseGraphRefreshIface.BeforeWriteParams;
begin
  inherited BeforeWriteParams;
  FParamLeftAxisParams:=FLeftAxisParams.GetParamsStr;
  FParamRightAxisParams:=FRightAxisParams.GetParamsStr;
  FParamBottomAxisParams:=FBottomAxisParams.GetParamsStr;
end;

procedure TSgtsBaseGraphRefreshIface.ReadParams(DatabaseConfig: Boolean=true);
begin
  inherited ReadParams(DatabaseConfig);
  FParamLeftAxisParams:=ReadParam(SConfigParamLeftAxisParams,FParamLeftAxisParams,cmBase64);
  FLeftAxisParams.SetParamsStr(FParamLeftAxisParams);
  FParamRightAxisParams:=ReadParam(SConfigParamRightAxisParams,FParamRightAxisParams,cmBase64);
  FRightAxisParams.SetParamsStr(FParamRightAxisParams);
  FParamBottomAxisParams:=ReadParam(SConfigParamBottomAxisParams,FParamBottomAxisParams,cmBase64);
  FBottomAxisParams.SetParamsStr(FParamBottomAxisParams);
  FGraphName:=ReadParam(SConfigParamGraphName,FGraphName);
end;

procedure TSgtsBaseGraphRefreshIface.WriteParams(DatabaseConfig: Boolean=true);
begin
  WriteParam(SConfigParamLeftAxisParams,FParamLeftAxisParams,cmBase64);
  WriteParam(SConfigParamRightAxisParams,FParamRightAxisParams,cmBase64);
  WriteParam(SConfigParamBottomAxisParams,FParamBottomAxisParams,cmBase64);
  WriteParam(SConfigParamGraphName,FGraphName);
  inherited WriteParams(DatabaseConfig);
end;

{ TSgtsBaseGraphRefreshForm }

constructor TSgtsBaseGraphRefreshForm.Create(ACoreIntf: ISgtsCore);
begin
  inherited Create(ACoreIntf);
  FLeftAxisParams:=TSgtsBaseGraphAxisParams.Create;
  FRightAxisParams:=TSgtsBaseGraphAxisParams.Create;
  FBottomAxisParams:=TSgtsBaseGraphAxisParams.Create;
end;

destructor TSgtsBaseGraphRefreshForm.Destroy;
begin
  FBottomAxisParams.Free;
  FRightAxisParams.Free;
  FLeftAxisParams.Free;
  inherited Destroy;
end;

function TSgtsBaseGraphRefreshForm.GetIface: TSgtsBaseGraphRefreshIface;
begin
  Result:=TSgtsBaseGraphRefreshIface(inherited Iface);
end;

function TSgtsBaseGraphRefreshForm.GetAxisParams(Index: Integer): TSgtsBaseGraphAxisParams;
begin
  Result:=nil;
  case Index of
    0: Result:=FLeftAxisParams;
    1: Result:=FBottomAxisParams;
    2: Result:=FRightAxisParams;
  end;
end;

function TSgtsBaseGraphRefreshForm.CheckRelationship(AxisParams: TSgtsBaseGraphAxisParams; Param: TSgtsBaseGraphAxisParam): Boolean;
var
  Str: TStringList;
  i: Integer;
  P: TSgtsBaseGraphAxisParam;

  function CheckRelationshipY(AP: TSgtsBaseGraphAxisParams): Boolean;
  begin
    Result:=true;
    for i:=0 to AP.Count-1 do begin
      P:=AP.Items[i];
      if P.Checked and (Trim(P.Relationship)<>'') then begin
        Str:=TStringList.Create;
        try
          GetStringsByString(P.Relationship,';',Str);
          if (Str.IndexOf(Param.FieldName)=-1) then begin
            Result:=false;
            exit;
          end;
        finally
          Str.Free;
        end;
      end;
    end;
  end;

  function CheckRelationshipX(AP: TSgtsBaseGraphAxisParams): Boolean;
  begin
    if Trim(Param.Relationship)<>'' then begin
      Str:=TStringList.Create;
      try
        GetStringsByString(Param.Relationship,';',Str);
        if Str.Count>0 then
          for i:=0 to FBottomAxisParams.Count-1 do begin
            P:=FBottomAxisParams.Items[i];
            if P.Checked and (Str.IndexOf(P.FieldName)=-1) then begin
              Result:=false;
              exit;
            end;
          end;
      finally
        Str.Free;
      end;
    end;
  end;

begin
  Result:=true;
  if (AxisParams=FLeftAxisParams) or (AxisParams=FRightAxisParams) then begin
    Result:=CheckRelationshipX(AP);
  end else begin
    Result:=CheckRelationshipY(FLeftAxisParams) and CheckRelationshipY(FRightAxisParams);
  end;
end;

procedure TSgtsBaseGraphRefreshForm.CheckParams(Index: Integer);
var
  i: Integer;
  FirstCheckGroup: Integer;
  AxisParams: TSgtsBaseGraphAxisParams;
  Param: TSgtsBaseGraphAxisParam;
begin
  AxisParams:=GetAxisParams(Index);
  if Assigned(AxisParams) then begin
    FirstCheckGroup:=AxisParams.GetFirstCheckGroup;
    CheckListBoxParams.Items.BeginUpdate;
    try
      for i:=0 to CheckListBoxParams.Count-1 do begin
        Param:=TSgtsBaseGraphAxisParam(CheckListBoxParams.Items.Objects[i]);
        CheckListBoxParams.Checked[i]:=Param.Checked;
        if FirstCheckGroup<>-2 then begin
          if FirstCheckGroup<>-1 then
            CheckListBoxParams.ItemEnabled[i]:=(Param.Group=FirstCheckGroup) and CheckRelationship(AxisParams,Param)
          else
            if not Param.Checked then
              CheckListBoxParams.ItemEnabled[i]:=false;
        end else begin
          CheckListBoxParams.ItemEnabled[i]:=CheckRelationship(AxisParams,Param);
        end;  
      end;
    finally
      CheckListBoxParams.Items.EndUpdate;
    end;
  end;
end;

procedure TSgtsBaseGraphRefreshForm.FillParams(Index: Integer);
var
  i: Integer;
  AxisParams: TSgtsBaseGraphAxisParams;
  Param: TSgtsBaseGraphAxisParam;
begin
  CheckListBoxParams.Items.BeginUpdate;
  try
    CheckListBoxParams.Items.Clear;
    AxisParams:=GetAxisParams(Index);
    FCurrenAxisParams:=AxisParams;
    if Assigned(AxisParams) then begin
      for i:=0 to AxisParams.Count-1 do begin
        Param:=AxisParams.Items[i];
        CheckListBoxParams.Items.AddObject(Param.Name,Param);
        CheckListBoxParams.Checked[i]:=Param.Checked;
      end;
    end;
  finally
    CheckListBoxParams.Items.EndUpdate;
  end;
end;

procedure TSgtsBaseGraphRefreshForm.ButtonDefaultClick(Sender: TObject);
begin
  if ShowQuestion(SThrowAdjustmentGraphics,mbNo)=mrYes then
    Default;
end;

procedure TSgtsBaseGraphRefreshForm.ButtonOkClick(Sender: TObject);
begin
  ModalResult:=mrNone;
  if (FLeftAxisParams.CheckCount=0) or (FBottomAxisParams.CheckCount=0) then begin
    if FLeftAxisParams.CheckCount=0 then begin
      ShowError(SNeedParamsToLeftAxis);
      TabControlAxis.TabIndex:=0;
      TabControlAxisChange(nil);
      CheckListBoxParams.SetFocus;
      exit;
    end;
    if FBottomAxisParams.CheckCount=0 then begin
      ShowError(SNeedParamsToBottomAxis);
      TabControlAxis.TabIndex:=1;
      TabControlAxisChange(nil);
      CheckListBoxParams.SetFocus;
      exit;
    end;
  end;      
  ModalResult:=mrOk;
end;

procedure TSgtsBaseGraphRefreshForm.TabControlAxisChange(Sender: TObject);
begin
  FillParams(TabControlAxis.TabIndex);
  CheckParams(TabControlAxis.TabIndex);
end;

procedure TSgtsBaseGraphRefreshForm.CheckListBoxParamsClickCheck(
  Sender: TObject);
var
  Index: Integer;
  Param: TSgtsBaseGraphAxisParam;
begin
  Index:=CheckListBoxParams.ItemIndex;
  if Index<>-1 then begin
    Param:=TSgtsBaseGraphAxisParam(CheckListBoxParams.Items.Objects[Index]);
    Param.Checked:=CheckListBoxParams.Checked[Index];
  end;
  CheckParams(TabControlAxis.TabIndex);
end;

procedure TSgtsBaseGraphRefreshForm.MenuItemParamCheckAllClick(
  Sender: TObject);
begin
  if Assigned(FCurrenAxisParams) then begin
    FCurrenAxisParams.CheckAll;
    CheckParams(TabControlAxis.TabIndex);
  end;
end;

procedure TSgtsBaseGraphRefreshForm.MenuItemParamUnCheckAllClick(
  Sender: TObject);
begin
  if Assigned(FCurrenAxisParams) then begin
    FCurrenAxisParams.UnCheckAll;
    CheckParams(TabControlAxis.TabIndex);
  end;
end;

procedure TSgtsBaseGraphRefreshForm.CheckListBoxParamsDblClick(
  Sender: TObject);
var
  Index: Integer;
  Param: TSgtsBaseGraphAxisParam;
  S: String;
begin
  Index:=CheckListBoxParams.ItemIndex;
  if Index<>-1 then begin
    Param:=TSgtsBaseGraphAxisParam(CheckListBoxParams.Items.Objects[Index]);
    S:=CheckListBoxParams.Items.Strings[Index];
    if InputQuery(SCaptionAxisParam,SInputAxisParam,S) then begin
      if Trim(S)='' then begin
        ShowError(SParamNameNotEmpty);
      end else begin
        CheckListBoxParams.Items.Strings[Index]:=S;
        Param.Name:=S;
      end;
    end;
  end;
end;

procedure TSgtsBaseGraphRefreshForm.Default;
begin
  FLeftAxisParams.CopyFrom(Iface.DefaultLeftAxisParams);
  FRightAxisParams.CopyFrom(Iface.DefaultRightAxisParams);
  FBottomAxisParams.CopyFrom(Iface.DefaultBottomAxisParams);
  FLeftAxisParams.UnCheckAll;
  FRightAxisParams.UnCheckAll;
  FBottomAxisParams.UnCheckAll;
  FillParams(TabControlAxis.TabIndex);
  CheckParams(TabControlAxis.TabIndex);
  EditName.Text:=Iface.DefaultGraphName;
end;

end.
