unit SgtsDataEditFm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, ToolWin, ImgList, Menus, ExtCtrls, StdCtrls,
  SgtsChildFm, SgtsFm, SgtsDataIfaceIntf, SgtsDatabaseIntf,
  SgtsDataEditFmIntf, SgtsDataFmIntf, SgtsCoreIntf, SgtsDatabaseCDS, SgtsMenus;

type
  TSgtsDataEditIface=class;

  TSgtsDataEditForm = class(TSgtsChildForm)
    StatusBar: TStatusBar;
    ToolBar: TToolBar;
    ToolButtonOk: TToolButton;
    ToolButtonCancel: TToolButton;
    MainMenu: TMainMenu;
    MenuDataEdit: TMenuItem;
    ImageList: TImageList;
    PanelEdit: TPanel;
    ToolButtonDefault: TToolButton;
    PanelButton: TPanel;
    ButtonCancel: TButton;
    ButtonOk: TButton;
    procedure ToolButtonCancelClick(Sender: TObject);
    procedure ToolButtonOkClick(Sender: TObject);
    procedure ToolButtonDefaultClick(Sender: TObject);
  private
    FOldFocusControl: TWinControl;
    FChangeFlag: Boolean;
    function GetIface: TSgtsDataEditIface;
    procedure CMDialogKey(var Message: TCMDialogKey); message CM_DIALOGKEY;
    procedure CMFocusChanged(var Message: TCMFocusChanged); message CM_FOCUSCHANGED;
    procedure EnableModal(AEnabled: Boolean);
  protected
    procedure DoClose(var Action: TCloseAction); override;
  public
    constructor Create(ACoreIntf: ISgtsCore); override;
    property Iface: TSgtsDataEditIface read GetIface;
    property ChangeFlag: Boolean read FChangeFlag write FChangeFlag;
  end;

  TSgtsDataEditIface=class(TSgtsChildIface,ISgtsDataEditForm)
  private
    FDataSet: TSgtsDatabaseCDS;
    FIfaceIntf: ISgtsDataIface;
    FCloseQuestion: String;
    FSaved: Boolean;
    FStopChanges: Boolean;
    FDisableSet: Boolean;
    FReadOnly: Boolean;

    function GetForm: TSgtsDataEditForm;
    function CheckControls: Boolean;
    function GetDatabase: ISgtsDatabase;
    procedure SetReadOnly(Value: Boolean);
  protected
    procedure InternalSetDefValues;
    function ChangesArePresent: Boolean; virtual;
    function SaveChanges: Boolean; virtual;
    procedure SetDefaults; virtual;
    function GetFormClass: TSgtsFormClass; override;
    procedure LinkExecuteDefs(AForm: TSgtsForm); virtual;
    procedure AfterCreateForm(AForm: TSgtsForm); override;
    procedure ExecuteDefsChange(Sender: TObject); virtual;
  public
    constructor Create(ACoreIntf: ISgtsCore; AIfaceIntf: ISgtsDataIface); reintroduce; virtual;
    destructor Destroy; override;
    procedure Init; override;
    function CanShow: Boolean; override;
    procedure UpdateButtons; virtual;
    procedure DatabaseLink; override;
    procedure SetDefValues; virtual;
    procedure SetChanges; virtual;
    procedure ShowModal; virtual;
    procedure Show; override;

    procedure Sync; virtual;

    property Form: TSgtsDataEditForm read GetForm;
    property DataSet: TSgtsDatabaseCDS read FDataSet;
    property CloseQuestion: String read FCloseQuestion write FCloseQuestion;
    property IfaceIntf: ISgtsDataIface read FIfaceIntf;
    property DisableSet: Boolean read FDisableSet write FDisableSet;
    property Database: ISgtsDatabase read GetDatabase;
    property ReadOnly: Boolean read FReadOnly write SetReadOnly;
  end;

var
  SgtsDataEditForm: TSgtsDataEditForm;

implementation

uses ToolEdit, DBClient, DB,
     SgtsConsts, SgtsUtils, SgtsExecuteDefs, SgtsDialogs,
     SgtsCoreObj, SgtsIface;

{$R *.dfm}

{ TSgtsDataEditIface }

constructor TSgtsDataEditIface.Create(ACoreIntf: ISgtsCore; AIfaceIntf: ISgtsDataIface);
begin
  inherited Create(ACoreIntf);
  FIfaceIntf:=AIfaceIntf;
  FDataSet:=TSgtsDatabaseCDS.Create(ACoreIntf);
  FDataSet.ExecuteDefs.OnChange:=ExecuteDefsChange;
end;

destructor TSgtsDataEditIface.Destroy; 
begin
  FDataSet.Free;
  inherited Destroy;
end;

function TSgtsDataEditIface.GetFormClass: TSgtsFormClass;
begin
  Result:=TSgtsDataEditForm;
end;

function TSgtsDataEditIface.GetForm: TSgtsDataEditForm;
begin
  Result:=TSgtsDataEditForm(inherited Form);
end;

function TSgtsDataEditIface.GetDatabase: ISgtsDatabase;
begin
  Result:=nil;
  if Assigned(CoreIntf) and
     Assigned(CoreIntf.DatabaseModules.Current) then
   Result:=CoreIntf.DatabaseModules.Current.Database;  
end;

procedure TSgtsDataEditIface.Init;
begin
  inherited Init;
  FCloseQuestion:=SSaveChanges;
  StoredInConfig:=false;
{  if not Assigned(FIfaceIntf) then
    with Permissions do begin
      AddDefault(SPermissionNameShow);
    end;}
end;

function TSgtsDataEditIface.CanShow: Boolean;
begin
  Result:=inherited CanShow;
end;

procedure TSgtsDataEditIface.LinkExecuteDefs(AForm: TSgtsForm); 
var
  i: Integer;
begin
  with FDataSet.ExecuteDefs do begin
    for i:=0 to Count-1 do begin
      Items[i].LinkControls(AForm);
    end;
  end;
end;

procedure TSgtsDataEditIface.InternalSetDefValues;
var
  OldCursor: TCursor;
begin
  FStopChanges:=true;
  OldCursor:=Screen.Cursor;
  Screen.Cursor:=crHourGlass;
  try
    SetDefValues;
  finally
    Screen.Cursor:=OldCursor;
    FStopChanges:=false;
  end;
end;

procedure TSgtsDataEditIface.SetDefValues;
begin
  if Assigned(IfaceIntf) then begin
    if not FDisableSet then
      DataSet.GetExecuteDefsByDataSet(IfaceIntf.DataSet)
    else
      DataSet.GetExecuteDefsByDefs(IfaceIntf.ExecuteDefs);
  end;
end;

procedure TSgtsDataEditIface.AfterCreateForm(AForm: TSgtsForm);
begin
  inherited AfterCreateForm(AForm);
  
  LinkExecuteDefs(AForm);

  Form.ButtonOk.Visible:=not FReadOnly;
  Form.ToolButtonOk.Visible:=Form.ButtonOk.Visible;

  Form.MenuDataEdit.Caption:=AForm.Caption;
  with Form do begin
    CreateMenuByToolBar(MenuDataEdit,ToolBar);
  end;

  UpdateButtons;
  InternalSetDefValues;

end;

procedure TSgtsDataEditIface.UpdateButtons;
begin
  if Assigned(Form) then begin
    with Form do begin
      UpdateMenuByButtons(MenuDataEdit);
    end;
  end;
end;

function TSgtsDataEditIface.CheckControls: Boolean;
var
  i: Integer;
  Def: TSgtsExecuteDef;
begin
  Result:=true;
  with DataSet.ExecuteDefs do begin
    for i:=0 to Count-1 do begin
      Def:=Items[i];
      if Def.Required and Def.Empty then begin
        ShowError(Format(SNeedElementValue,[Def.Caption]));
        if Assigned(Def.Control) then begin
          if Def.Control.CanFocus then begin
            Def.Control.SetFocus;
            Result:=false;
            exit;
          end;
        end;
      end;
    end;
  end;
end;

function TSgtsDataEditIface.ChangesArePresent: Boolean;
var
  i: Integer;
  Def: TSgtsExecuteDef;
begin
  Result:=false;
  if not FStopChanges then
    with DataSet.ExecuteDefs do begin
      for i:=0 to Count-1 do begin
        Def:=Items[i];
        if Def.Value<>Def.DefaultValue then begin
          Result:=true;
          exit;
        end;
      end;
    end;
end;

function TSgtsDataEditIface.SaveChanges: Boolean;
begin
  Result:=true;
end;

procedure TSgtsDataEditIface.SetDefaults;
var
  i: Integer;
  Def: TSgtsExecuteDef;
begin
  FStopChanges:=true;
  try
    with DataSet.ExecuteDefs do begin
      for i:=0 to Count-1 do begin
        Def:=Items[i];
        Def.SetDefault;
      end;
    end;
    SetChanges;
  finally
    FStopChanges:=false;
  end;
end;

procedure TSgtsDataEditIface.SetChanges;
begin
  if Assigned(Form) then begin
    with Form do begin
      ToolButtonOk.Enabled:=ChangesArePresent or ChangeFlag;
      ToolButtonDefault.Enabled:=ToolButtonOk.Enabled;
      ButtonOk.Enabled:=ToolButtonOk.Enabled;
    end;
  end;
  UpdateButtons;
end;

procedure TSgtsDataEditIface.Sync;
var
  i: Integer;
  DSync: TSgtsDatabaseCDS;
  Def: TSgtsExecuteDef;
  Field: TField;
  OldCursor: TCursor;
begin
  OldCursor:=Screen.Cursor;
  Screen.Cursor:=crHourGlass;
  try
    if not Assigned(IfaceIntf) then begin
      DSync:=TSgtsDatabaseCDS.Create(CoreIntf);
      try
        with DSync do begin
          ProviderName:=FDataSet.ProviderName;
          PacketRecords:=0;
          for i:=0 to FDataSet.ExecuteDefs.Count-1 do begin
            Def:=FDataSet.ExecuteDefs.Items[i];
            if Def.ParamType in [ptInput, ptInputOutput] then
              SelectDefs.AddInvisible(Def.FieldName);
          end;
          Open;
          if Active then begin
            FStopChanges:=true;
            try
              for i:=0 to FieldCount-1 do begin
                Field:=Fields[i];
                Def:=FDataSet.ExecuteDefs.FindByFieldName(Field.FieldName);
                if Assigned(Def) then begin
                  Def.Size:=Field.Size;
                  Def.DataType:=Field.DataType;
                end;
              end;
            finally
              FStopChanges:=false;
            end;
          end;
        end;
      finally
        DSync.Free;
      end;
    end else begin
      if Assigned(IfaceIntf.DataSet) then begin
        with IfaceIntf.DataSet do begin
          if Active then begin
            FStopChanges:=true;
            try
              for i:=0 to FieldCount-1 do begin
                Field:=Fields[i];
                Def:=FDataSet.ExecuteDefs.FindByFieldName(Field.FieldName);
                if Assigned(Def) then begin
                  Def.Size:=Field.Size;
                  Def.DataType:=Field.DataType;
                end;
              end;
            finally
              FStopChanges:=false;
            end;
          end; 
        end;
      end;
    end;
  finally
    Screen.Cursor:=OldCursor;
  end;
end;

procedure TSgtsDataEditIface.DatabaseLink;
begin
  inherited DatabaseLink;
  Sync;
end;

procedure TSgtsDataEditIface.ExecuteDefsChange(Sender: TObject);
begin
  SetChanges;
end;

procedure TSgtsDataEditIface.ShowModal;
var
  AForm: TSgtsDataEditForm;
begin
  if CanShow then begin
    AForm:=TSgtsDataEditForm(CreateForm);
    if Assigned(AForm) then begin
      try
        AForm.InitByIface(Self);
        SetDefaultForm(AForm);
        Form.Caption:='';
        AsModal:=true;
        SetDefaultFormStyle(fsNormal);
        AfterCreateForm(AForm);
        if NeedShow then
          with AForm do begin
            MenuDataEdit.Visible:=false;
            BorderStyle:=bsDialog;
            PanelButton.Visible:=true;
            StatusBar.Visible:=false;
            EnableModal(true);
            BeforeShowForm(AForm);
            ShowModal;
            LogWrite(SInterfaceShow);
          end;
      finally
        SetDefaultForm(nil);
        AForm.Free;
      end;
    end;
  end;
end;

procedure TSgtsDataEditIface.Show;
begin
  ShowModal;
end;

procedure TSgtsDataEditIface.SetReadOnly(Value: Boolean);
begin
  if FReadOnly<>Value then
    FReadOnly:=Value;
end;

{ TSgtsDataEditForm }

constructor TSgtsDataEditForm.Create(ACoreIntf: ISgtsCore);
begin
  inherited Create(ACoreIntf);
  if Constraints.MinHeight<>0 then
    Constraints.MinHeight:=Constraints.MinHeight-PanelButton.Height;
  Height:=Height-PanelButton.Height;
end;

function TSgtsDataEditForm.GetIface: TSgtsDataEditIface;
begin
  Result:=TSgtsDataEditIface(inherited Iface);
end;

procedure TSgtsDataEditForm.CMFocusChanged(var Message: TCMFocusChanged);
begin
  with Message do
    FOldFocusControl:=Sender;
  inherited;
end;

procedure TSgtsDataEditForm.CMDialogKey(var Message: TCMDialogKey);
begin
  with Message do
    if  ((CharCode = VK_RETURN) or (CharCode = VK_ESCAPE)) and
      (KeyDataToShiftState(Message.KeyData) = [])  then  begin
      if CharCode=VK_RETURN then begin
        if ToolButtonOk.Enabled then begin
          ToolButtonOk.Click;
          Result:=1;
        end;
      end;
      if CharCode=VK_ESCAPE then begin
        if ToolButtonCancel.Enabled then begin
          ToolButtonCancel.Click;
          Result:=1;
        end;
      end;
    end else
      inherited;
end;

procedure TSgtsDataEditForm.ToolButtonCancelClick(Sender: TObject);
begin
  Close;
end;

procedure TSgtsDataEditForm.ToolButtonOkClick(Sender: TObject);
begin
  with Iface do
    if not Iface.ReadOnly and
       CheckControls then
      if ChangesArePresent or ChangeFlag then begin
        FSaved:=false;
        if SaveChanges then begin
          FSaved:=true;
          Close;
        end;
      end;  
end;

procedure TSgtsDataEditForm.DoClose(var Action: TCloseAction);
begin
  Action:=caFree;
  with Iface do
    if not Iface.ReadOnly and
       not FSaved and 
       (ChangesArePresent or ChangeFlag) then begin
      case ShowQuestionCancel(CloseQuestion,mbCancel) of
        mrYes: begin
          if CheckControls then
            if SaveChanges then
              inherited DoClose(Action)
          else begin
            Action:=caNone;
            exit;
          end;
        end;
        mrNo: inherited DoClose(Action);
        mrCancel: Action:=caNone;
      end;
    end;
end;

procedure TSgtsDataEditForm.ToolButtonDefaultClick(Sender: TObject);
begin
  Iface.SetDefaults;
end;

procedure TSgtsDataEditForm.EnableModal(AEnabled: Boolean);
begin
  if AEnabled then begin
    if Constraints.MinHeight<>0 then
      Constraints.MinHeight:=Constraints.MinHeight-StatusBar.Height+PanelButton.Height;
    if Constraints.MinHeight<Height then
      Height:=Height-StatusBar.Height+PanelButton.Height;
  end;  
end;

end.
