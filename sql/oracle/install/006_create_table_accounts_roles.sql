/* Создание таблицы доступ к ролям */

CREATE TABLE ACCOUNTS_ROLES 
(
ACCOUNT_ID INTEGER NOT NULL, 
ROLE_ID INTEGER NOT NULL, 
PRIMARY KEY (ACCOUNT_ID,ROLE_ID),
FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS (ACCOUNT_ID),
FOREIGN KEY (ROLE_ID) REFERENCES ACCOUNTS (ACCOUNT_ID)
)


--

/* Создание просмотра таблицы доступ к ролям */

CREATE VIEW S_ACCOUNTS_ROLES
AS
  SELECT AR.*, A1.NAME AS ACCOUNT_NAME, A2.NAME AS ROLE_NAME
    FROM ACCOUNTS_ROLES AR, ACCOUNTS A1, ACCOUNTS A2
   WHERE A1.ACCOUNT_ID=AR.ACCOUNT_ID AND A2.ACCOUNT_ID=AR.ROLE_ID


--

/* Создание процедуры создания доступа к роли */

CREATE PROCEDURE I_ACCOUNT_ROLE
(
  ACCOUNT_ID IN INTEGER,
  ROLE_ID IN INTEGER
)
AS
BEGIN
  INSERT INTO ACCOUNTS_ROLES (ACCOUNT_ID,ROLE_ID)
       VALUES (ACCOUNT_ID,ROLE_ID);
  COMMIT;
END;

--

/* Создание процедуры изменения доступа к роли */

CREATE PROCEDURE U_ACCOUNT_ROLE
(
  ACCOUNT_ID IN INTEGER,
  ROLE_ID IN INTEGER,
  OLD_ACCOUNT_ID IN INTEGER,
  OLD_ROLE_ID IN INTEGER
)
AS
BEGIN
  UPDATE ACCOUNTS_ROLES 
     SET ACCOUNT_ID=U_ACCOUNT_ROLE.ACCOUNT_ID,
         ROLE_ID=U_ACCOUNT_ROLE.ROLE_ID
   WHERE ACCOUNT_ID=OLD_ACCOUNT_ID 
     AND ROLE_ID=OLD_ROLE_ID;
  COMMIT;        
END;

--

/* Создание процедуры удаления доступа к роли */

CREATE PROCEDURE D_ACCOUNT_ROLE
(
  OLD_ACCOUNT_ID IN INTEGER,
  OLD_ROLE_ID IN INTEGER
)
AS
BEGIN
  DELETE FROM ACCOUNTS_ROLES
        WHERE ACCOUNT_ID=OLD_ACCOUNT_ID
          AND ROLE_ID=OLD_ROLE_ID;
  COMMIT;        
END;

--

/* Создание процедуры очистки доступа к ролям */

CREATE PROCEDURE C_ACCOUNT_ROLE
(
  OLD_ACCOUNT_ID IN INTEGER
)
AS
BEGIN
  DELETE FROM ACCOUNTS_ROLES
        WHERE ACCOUNT_ID=OLD_ACCOUNT_ID;
  COMMIT;        
END;

--

/* Фиксация изменений БД */

COMMIT