/* Создание последовательности для таблицы дерева объектов */

CREATE SEQUENCE SEQ_OBJECT_TREES
INCREMENT BY 1 
START WITH 2500 
MAXVALUE 1.0E28 
MINVALUE 2500
NOCYCLE 
CACHE 20 
NOORDER

--

/* Создание фунции генерации идентификатора для таблицы дерева объектов */


CREATE FUNCTION GET_OBJECT_TREE_ID RETURN INTEGER IS
  ID INTEGER;
BEGIN
  SELECT SEQ_OBJECT_TREES.NEXTVAL INTO ID FROM DUAL;
  RETURN ID;
END;

--

/* Создание таблицы дерева объектов */

CREATE TABLE OBJECT_TREES
(
  OBJECT_TREE_ID INTEGER NOT NULL, 
  OBJECT_ID INTEGER NOT NULL,
  PRIORITY INTEGER NOT NULL,
  PARENT_ID INTEGER,
  PRIMARY KEY (OBJECT_TREE_ID),
  FOREIGN KEY (OBJECT_ID) REFERENCES OBJECTS (OBJECT_ID),
  FOREIGN KEY (PARENT_ID) REFERENCES OBJECT_TREES (OBJECT_TREE_ID)
)

--

/* Создание функции определения путей в дереве объектов */

CREATE OR REPLACE FUNCTION GET_OBJECT_PATHS
(
  OBJECT_ID INTEGER
)
RETURN VARCHAR2
IS
  RET VARCHAR2(4000);
BEGIN
  RET:='';
  FOR INC IN (SELECT O1.NAME, OT2.OBJECT_ID, OT1.PRIORITY
                FROM OBJECT_TREES OT1, OBJECTS O1, OBJECT_TREES OT2
               WHERE OT1.OBJECT_ID=O1.OBJECT_ID
			     AND OT1.PARENT_ID=OT2.OBJECT_TREE_ID (+)
				 AND OT1.OBJECT_ID=GET_OBJECT_PATHS.OBJECT_ID
            ORDER BY OT1.PRIORITY DESC) LOOP
	IF (INC.OBJECT_ID IS NOT NULL) THEN				 
      RET:=GET_OBJECT_PATHS(INC.OBJECT_ID)||'\'||INC.NAME||RET;
	ELSE
	  RET:=CHR(13)||CHR(10)||INC.NAME;
	END IF; 
  END LOOP;			   
  RETURN RET;
END;

--

/* Создание процедуры определения пути в дереве объектов */

CREATE OR REPLACE PROCEDURE G_OBJECT_PATHS
(
  OBJECT_ID IN INTEGER,
  PATHS IN OUT VARCHAR2,
  NAME IN OUT VARCHAR2
)
AS
BEGIN
  PATHS:=GET_OBJECT_PATHS(OBJECT_ID);
  PATHS:=TRIM(CHR(13) FROM PATHS);
  PATHS:=TRIM(CHR(10) FROM PATHS);
  SELECT NAME INTO G_OBJECT_PATHS.NAME 
    FROM OBJECTS
   WHERE OBJECT_ID=G_OBJECT_PATHS.OBJECT_ID;	
END;

--

/* Обновление просмотра таблицы объектов*/

CREATE OR REPLACE VIEW S_OBJECTS
AS
  SELECT O1.*, TRIM(CHR(10) FROM TRIM(CHR(13) FROM GET_OBJECT_PATHS(O1.OBJECT_ID))) AS PATHS
    FROM OBJECTS O1

--

/* Создание просмотра таблицы дерева объектов */

CREATE OR REPLACE VIEW S_OBJECT_TREES
AS
  SELECT OT1.* , O1.NAME AS OBJECT_NAME, O1.DESCRIPTION AS OBJECT_DESCRIPTION, 
         O2.NAME AS PARENT_NAME
    FROM OBJECT_TREES OT1, OBJECTS O1, OBJECT_TREES OT2, OBJECTS O2
   WHERE OT1.OBJECT_ID=O1.OBJECT_ID
     AND OT1.PARENT_ID=OT2.OBJECT_TREE_ID (+)
     AND OT2.OBJECT_ID=O2.OBJECT_ID (+)
   START WITH OT1.PARENT_ID IS NULL
 CONNECT BY OT1.PARENT_ID=PRIOR OT1.OBJECT_TREE_ID
   ORDER BY LEVEL, OT1.PRIORITY

--

/* Создание процедуры создания узла дерева объектов */


CREATE OR REPLACE PROCEDURE I_OBJECT_TREE
(
  OBJECT_TREE_ID IN INTEGER,
  OBJECT_ID IN INTEGER,
  PRIORITY IN INTEGER,
  PARENT_ID IN INTEGER
)
AS
BEGIN
  INSERT INTO OBJECT_TREES (OBJECT_TREE_ID,OBJECT_ID,PRIORITY,PARENT_ID)
       VALUES (OBJECT_TREE_ID,OBJECT_ID,PRIORITY,PARENT_ID);
  COMMIT;
END;

--

/* Создание процедуры изменения узла дерева объектов */

CREATE OR REPLACE PROCEDURE U_OBJECT_TREE
(
  OBJECT_TREE_ID IN INTEGER,
  OBJECT_ID IN INTEGER,
  PRIORITY IN INTEGER,
  PARENT_ID IN INTEGER,
  OLD_OBJECT_TREE_ID IN INTEGER
)
AS
BEGIN
  UPDATE OBJECT_TREES 
     SET OBJECT_TREE_ID=U_OBJECT_TREE.OBJECT_TREE_ID,
         OBJECT_ID=U_OBJECT_TREE.OBJECT_ID,
		 PRIORITY=U_OBJECT_TREE.PRIORITY, 
         PARENT_ID=U_OBJECT_TREE.PARENT_ID 
   WHERE OBJECT_TREE_ID=OLD_OBJECT_TREE_ID;
  COMMIT;        
END;

--

/* Создание процедуры удаления узла дерева объектов */

CREATE OR REPLACE PROCEDURE D_OBJECT_TREE
(
  OLD_OBJECT_TREE_ID IN INTEGER
)
AS
BEGIN
  DELETE FROM OBJECT_TREES
        WHERE OBJECT_TREE_ID=OLD_OBJECT_TREE_ID;
  COMMIT;        
END;

--

/* Фиксация изменений БД */


COMMIT