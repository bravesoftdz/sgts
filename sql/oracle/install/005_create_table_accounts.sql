/* Создание последовательности для таблицы учетные записи */

CREATE SEQUENCE SEQ_ACCOUNTS
INCREMENT BY 1 
START WITH 2500
MAXVALUE 1.0E28 
MINVALUE 2500
NOCYCLE 
CACHE 20 
NOORDER

-- 

/* Создание фунции генерации идентификатора для таблицы учетные записи */

CREATE FUNCTION GET_ACCOUNT_ID RETURN INTEGER IS
  ID INTEGER;
BEGIN
  SELECT SEQ_ACCOUNTS.NEXTVAL INTO ID FROM DUAL;
  RETURN ID;
END;

--

/* Создание таблицы учетные записи */


CREATE TABLE ACCOUNTS 
(
ACCOUNT_ID INTEGER NOT NULL, 
PERSONNEL_ID INTEGER, 
NAME VARCHAR2(50) NOT NULL,
PASS VARCHAR2(50), 
DESCRIPTION VARCHAR2(250), 
DB_USER VARCHAR2(50),
DB_PASS VARCHAR2(50),
IS_ROLE INTEGER NOT NULL, 
ADJUSTMENT CLOB,
PRIMARY KEY (ACCOUNT_ID),
FOREIGN KEY (PERSONNEL_ID) REFERENCES PERSONNELS (PERSONNEL_ID)
)  

--

/* Создание просмотра таблицы учетные записи */

CREATE OR REPLACE VIEW S_ACCOUNTS 
AS 
  SELECT A.*, 
         P.FNAME||' '||P.NAME||' '||P.SNAME AS PERSONNEL_NAME,
		 P.FNAME AS FIRST_NAME,
		 P.NAME AS SECOND_NAME,
		 P.SNAME AS LAST_NAME 
    FROM ACCOUNTS A, PERSONNELS P  
   WHERE A.PERSONNEL_ID=P.PERSONNEL_ID (+) 
     AND IS_ROLE=0 

--

/* Создание процедуры создания учетной записи */

CREATE OR REPLACE PROCEDURE I_ACCOUNT
(
  ACCOUNT_ID IN INTEGER,
  PERSONNEL_ID IN INTEGER, 
  NAME IN VARCHAR2,
  PASS IN VARCHAR2,
  ADJUSTMENT IN CLOB 
)
AS
  DESCRIPTION VARCHAR2(250);
  DB_USER VARCHAR2(50);
  DB_PASS VARCHAR2(50);
BEGIN
  INSERT INTO ACCOUNTS (ACCOUNT_ID,PERSONNEL_ID,NAME,PASS,DESCRIPTION,DB_USER,DB_PASS,IS_ROLE,ADJUSTMENT)
       VALUES (ACCOUNT_ID,PERSONNEL_ID,NAME,PASS,DESCRIPTION,DB_USER,DB_PASS,0,ADJUSTMENT);
END;

--

/* Создание процедуры изменения учетной записи */

CREATE OR REPLACE PROCEDURE U_ACCOUNT
(
  ACCOUNT_ID IN INTEGER,
  PERSONNEL_ID IN INTEGER,
  NAME IN VARCHAR2, 
  PASS IN VARCHAR2,
  ADJUSTMENT IN CLOB,
  OLD_ACCOUNT_ID IN INTEGER
)
AS
BEGIN
  UPDATE ACCOUNTS 
     SET ACCOUNT_ID=U_ACCOUNT.ACCOUNT_ID,
         PERSONNEL_ID=U_ACCOUNT.PERSONNEL_ID,
         NAME=U_ACCOUNT.NAME,
         PASS=U_ACCOUNT.PASS,
         ADJUSTMENT=U_ACCOUNT.ADJUSTMENT
   WHERE ACCOUNT_ID=OLD_ACCOUNT_ID;
  COMMIT;        
END;

--

/* Создание процедуры удаления учетной записи */

CREATE OR REPLACE PROCEDURE D_ACCOUNT
(
  OLD_ACCOUNT_ID IN INTEGER
)
AS
BEGIN
  DELETE FROM ACCOUNTS
        WHERE ACCOUNT_ID=OLD_ACCOUNT_ID;
  COMMIT;        
END;


--

/* Создание просмотра ролей */

CREATE OR REPLACE VIEW S_ROLES
AS
 SELECT * FROM ACCOUNTS
  WHERE IS_ROLE=1

--

/* Создание процедуры создания роли */

CREATE OR REPLACE PROCEDURE I_ROLE
(
  ACCOUNT_ID IN INTEGER,
  NAME IN VARCHAR2,
  DESCRIPTION IN VARCHAR2
)
AS
  PERSONNEL_ID INTEGER;
  PASS VARCHAR2(50);
  IS_ROLE INTEGER;
  DB_USER VARCHAR2(50);
  DB_PASS VARCHAR2(50);
BEGIN
  INSERT INTO ACCOUNTS (ACCOUNT_ID,PERSONNEL_ID,NAME,PASS,DESCRIPTION,DB_USER,DB_PASS,IS_ROLE)
       VALUES (ACCOUNT_ID,PERSONNEL_ID,NAME,PASS,DESCRIPTION,DB_USER,DB_PASS,1);
  COMMIT;
END;

--

/* Создание процедуры изменения роли */

CREATE OR REPLACE PROCEDURE U_ROLE
(
  ACCOUNT_ID IN INTEGER,
  NAME IN VARCHAR2, 
  DESCRIPTION IN VARCHAR2,
  OLD_ACCOUNT_ID IN INTEGER
)
AS
BEGIN
  UPDATE ACCOUNTS 
     SET ACCOUNT_ID=U_ROLE.ACCOUNT_ID,
         NAME=U_ROLE.NAME,
         DESCRIPTION=U_ROLE.DESCRIPTION
   WHERE ACCOUNT_ID=OLD_ACCOUNT_ID;
  COMMIT;        
END;

--

/* Создание процедуры удаления роли */

CREATE OR REPLACE PROCEDURE D_ROLE
(
  OLD_ACCOUNT_ID IN INTEGER
)
AS
BEGIN
  DELETE FROM ACCOUNTS
        WHERE ACCOUNT_ID=OLD_ACCOUNT_ID;
  COMMIT;        
END;

--

/* Фиксация изменений БД */

COMMIT