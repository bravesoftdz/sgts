/* Создание процедуры расчета деформации с учетом поправок по розетке */

CREATE OR REPLACE PROCEDURE CALCULATE_NDS_ROZETKA_DEFORM
( 
  ROZETKA IN INTEGER, 
  DATE_OBSERVATION IN DATE, 
  MEASURE_TYPE_ID IN INTEGER, 
  CYCLE_ID IN INTEGER, 
  IS_BASE IN INTEGER,   
  DEFORMATION_V OUT FLOAT, 
  DEFORMATION_G OUT FLOAT, 
  DEFORMATION_PR OUT FLOAT, 
  POINT_ID_V OUT INTEGER, 
  POINT_ID_G OUT INTEGER, 
  POINT_ID_PR OUT INTEGER 
) 
AS 
  RELATIVE_DEFORMATION FLOAT; 
  RELATIVE_DEFORMATION_V FLOAT; 
  RELATIVE_DEFORMATION_G FLOAT; 
  RELATIVE_DEFORMATION_B FLOAT; 
  RELATIVE_DEFORMATION_P FLOAT; 
  RELATIVE_DEFORMATION_PR FLOAT; 
  TENSION_DEFORMATION FLOAT; 
  TENSION_DEFORMATION_B FLOAT; 
  TENSION_DEFORMATION_P FLOAT; 
  TENSION_DEFORMATION_V FLOAT; 
  TENSION_DEFORMATION_G FLOAT; 
  TENSION_DEFORMATION_PR FLOAT; 
  FREQUENCY FLOAT; 
  B_EXISTS INTEGER; 
  P_EXISTS INTEGER; 
  PERCENT FLOAT; 
  DTENSION_DEFORMATION_G FLOAT; 
  DTENSION_DEFORMATION_V FLOAT; 
BEGIN 
 
  B_EXISTS:=0; 
  P_EXISTS:=0; 
   
  FOR INC IN (SELECT P.POINT_ID, C2.PLACE  
                FROM POINTS P,  
                     (SELECT C.COMPONENT_ID, C.CONVERTER_ID  
                        FROM COMPONENTS C, CONVERTER_PASSPORTS CP 
                       WHERE C.COMPONENT_ID=CP.COMPONENT_ID 
                      AND CP.VALUE=TO_CHAR(ROZETKA) 
                   AND C.PARAM_ID=60017 /* № розетки */) C1, 
                     (SELECT C.COMPONENT_ID, C.CONVERTER_ID, CP.VALUE AS PLACE  
                     FROM COMPONENTS C, CONVERTER_PASSPORTS CP 
                    WHERE C.COMPONENT_ID=CP.COMPONENT_ID 
                   AND UPPER(CP.VALUE)<>UPPER('конус') 
                   AND C.PARAM_ID=60008 /* Расположение прибора */) C2, 
                  (SELECT C.COMPONENT_ID, C.CONVERTER_ID  
                     FROM COMPONENTS C, CONVERTER_PASSPORTS CP 
                    WHERE C.COMPONENT_ID=CP.COMPONENT_ID 
                AND C.PARAM_ID=60012 /* Дата выхода из строя */ 
                AND ((DECODE(CP.VALUE,NULL,NULL,TO_DATE(CP.VALUE,'DD.MM.YYYY'))>=CALCULATE_NDS_ROZETKA_DEFORM.DATE_OBSERVATION) OR (TRIM(CP.VALUE) IS NULL))) C3           
               WHERE P.POINT_ID=C1.CONVERTER_ID 
                 AND P.POINT_ID=C2.CONVERTER_ID 
     AND P.POINT_ID=C3.CONVERTER_ID) LOOP 
     
    FREQUENCY:=0.0;      
   FOR INC2 IN (SELECT JF.VALUE  
                FROM JOURNAL_FIELDS JF 
               WHERE JF.POINT_ID=INC.POINT_ID 
                 AND JF.PARAM_ID=60003 /* Частота */ 
     AND MEASURE_TYPE_ID=CALCULATE_NDS_ROZETKA_DEFORM.MEASURE_TYPE_ID 
     AND DATE_OBSERVATION=CALCULATE_NDS_ROZETKA_DEFORM.DATE_OBSERVATION 
     AND IS_BASE=CALCULATE_NDS_ROZETKA_DEFORM.IS_BASE 
        AND JF.WHO_CONFIRM IS NOT NULL 
        AND JF.DATE_CONFIRM IS NOT NULL 
     AND JF.VALUE<>0.0) LOOP 
      FREQUENCY:=INC2.VALUE; 
   EXIT;           
    END LOOP;   
      
 IF ((UPPER(INC.PLACE)=UPPER('биссектрисный')) AND (FREQUENCY<>0.0)) THEN 
   B_EXISTS:=1; 
 END IF;        
      
 IF ((UPPER(INC.PLACE)=UPPER('перпендикулярный')) AND (FREQUENCY<>0.0)) THEN 
   P_EXISTS:=1; 
 END IF; 
          
    IF (FREQUENCY<>0.0) THEN           
        
      RELATIVE_DEFORMATION:=NULL; 
      CALCULATE_NDS_R_DEFORM(INC.POINT_ID,FREQUENCY,RELATIVE_DEFORMATION); 
/*   DBMS_OUTPUT.PUT_LINE('POINT_ID='||TO_CHAR(INC.POINT_ID)); 
   DBMS_OUTPUT.PUT_LINE('FREQUENCY='||TO_CHAR(FREQUENCY)); 
   DBMS_OUTPUT.PUT_LINE('RELATIVE_DEFORMATION='||TO_CHAR(RELATIVE_DEFORMATION));*/ 
 
   IF (RELATIVE_DEFORMATION IS NOT NULL) THEN      
     TENSION_DEFORMATION:=NULL; 
        CALCULATE_NDS_ROZETKA_T_DEFORM(ROZETKA,DATE_OBSERVATION,MEASURE_TYPE_ID,CYCLE_ID,IS_BASE, 
                                 RELATIVE_DEFORMATION,TENSION_DEFORMATION); 
  IF (TENSION_DEFORMATION IS NOT NULL) THEN 
    CASE UPPER(INC.PLACE) 
   WHEN UPPER('вертикальный') THEN  
     RELATIVE_DEFORMATION_V:=RELATIVE_DEFORMATION; 
     TENSION_DEFORMATION_V:=TENSION_DEFORMATION; 
/*     DBMS_OUTPUT.PUT_LINE('RELATIVE_DEFORMATION_V='||TO_CHAR(RELATIVE_DEFORMATION_V)); 
     DBMS_OUTPUT.PUT_LINE('TENSION_DEFORMATION_V='||TO_CHAR(TENSION_DEFORMATION_V));*/ 
     POINT_ID_V:=INC.POINT_ID;  
   WHEN UPPER('горизонтальный') THEN  
     RELATIVE_DEFORMATION_G:=RELATIVE_DEFORMATION;  
     TENSION_DEFORMATION_G:=TENSION_DEFORMATION;  
/*     DBMS_OUTPUT.PUT_LINE('RELATIVE_DEFORMATION_G='||TO_CHAR(RELATIVE_DEFORMATION_G)); 
     DBMS_OUTPUT.PUT_LINE('TENSION_DEFORMATION_G='||TO_CHAR(TENSION_DEFORMATION_G));*/ 
     POINT_ID_G:=INC.POINT_ID;  
   WHEN UPPER('биссектрисный') THEN  
     RELATIVE_DEFORMATION_B:=RELATIVE_DEFORMATION;  
     TENSION_DEFORMATION_B:=TENSION_DEFORMATION;  
/*     DBMS_OUTPUT.PUT_LINE('RELATIVE_DEFORMATION_B='||TO_CHAR(RELATIVE_DEFORMATION_B)); 
     DBMS_OUTPUT.PUT_LINE('TENSION_DEFORMATION_B='||TO_CHAR(TENSION_DEFORMATION_B));*/ 
   WHEN UPPER('перпендикулярный') THEN  
     RELATIVE_DEFORMATION_P:=RELATIVE_DEFORMATION;  
     TENSION_DEFORMATION_P:=TENSION_DEFORMATION;  
/*     DBMS_OUTPUT.PUT_LINE('RELATIVE_DEFORMATION_P='||TO_CHAR(RELATIVE_DEFORMATION_P)); 
     DBMS_OUTPUT.PUT_LINE('TENSION_DEFORMATION_P='||TO_CHAR(TENSION_DEFORMATION_P));*/ 
   WHEN UPPER('продольный') THEN  
     RELATIVE_DEFORMATION_PR:=RELATIVE_DEFORMATION;  
     TENSION_DEFORMATION_PR:=TENSION_DEFORMATION; 
/*     DBMS_OUTPUT.PUT_LINE('RELATIVE_DEFORMATION_PR='||TO_CHAR(RELATIVE_DEFORMATION_PR)); 
     DBMS_OUTPUT.PUT_LINE('TENSION_DEFORMATION_PR='||TO_CHAR(TENSION_DEFORMATION_PR));*/ 
     POINT_ID_PR:=INC.POINT_ID; 
/*   ELSE  
     DBMS_OUTPUT.PUT_LINE('PLACE='||INC.PLACE);*/  
       END CASE; 
     END IF; 
      END IF;   
    END IF; 
  END LOOP; 
    
  PERCENT:=0.0; 
  IF (TENSION_DEFORMATION_V+TENSION_DEFORMATION_G)<>0.0 THEN 
 PERCENT:=ABS(100-(TENSION_DEFORMATION_B+TENSION_DEFORMATION_P)*100/(TENSION_DEFORMATION_V+TENSION_DEFORMATION_G)); 
  END IF; 
      
  IF ((B_EXISTS=1) AND (P_EXISTS=1) AND (PERCENT<=25.0)) THEN 
    
 TENSION_DEFORMATION:=((TENSION_DEFORMATION_V+TENSION_DEFORMATION_G)+(TENSION_DEFORMATION_B+TENSION_DEFORMATION_P))/2- 
                       (TENSION_DEFORMATION_V+TENSION_DEFORMATION_G); 
 
 DTENSION_DEFORMATION_G:=TENSION_DEFORMATION*TENSION_DEFORMATION_G/(TENSION_DEFORMATION_V+TENSION_DEFORMATION_G); 
 DTENSION_DEFORMATION_V:=TENSION_DEFORMATION*TENSION_DEFORMATION_V/(TENSION_DEFORMATION_V+TENSION_DEFORMATION_G); 
    
 TENSION_DEFORMATION_G:=TENSION_DEFORMATION_G+DTENSION_DEFORMATION_G; 
 TENSION_DEFORMATION_V:=TENSION_DEFORMATION_V+DTENSION_DEFORMATION_V;  
  END IF; 
  
  DEFORMATION_V:=TENSION_DEFORMATION_V; 
  DEFORMATION_G:=TENSION_DEFORMATION_G; 
  DEFORMATION_PR:=TENSION_DEFORMATION_PR; 
    
END;

--

/* Фиксация изменений */

COMMIT

