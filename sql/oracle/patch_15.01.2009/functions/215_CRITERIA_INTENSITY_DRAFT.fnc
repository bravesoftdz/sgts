/* Создание функции расчета критерия интенсивности осадки */

CREATE OR REPLACE FUNCTION CRITERIA_INTENSITY_DRAFT 
( 
  CRITERIA_ID IN INTEGER, 
  PERIOD IN INTEGER, 
  DATE_BEGIN IN DATE, 
  DATE_END IN DATE, 
  CYCLE_MIN IN INTEGER, 
  CYCLE_MAX IN INTEGER 
)  
RETURN CRITERIA_TABLE  
PIPELINED  
AS 
  RET CRITERIA_OBJECT:=CRITERIA_OBJECT(NULL,NULL,NULL,NULL,NULL); 
  FIRST_MIN_VALUE FLOAT; 
  FIRST_MAX_VALUE FLOAT; 
  SECOND_MIN_VALUE FLOAT; 
  SECOND_MAX_VALUE FLOAT; 
  FIRST_MODULO INTEGER; 
  SECOND_MODULO INTEGER; 
  ADATE_BEGIN DATE; 
  ADATE_END DATE; 
  ACYCLE_MIN INTEGER; 
  ACYCLE_MAX INTEGER; 
  FLAG INTEGER; 
  APARAM_ID INTEGER:=50063 /* Текущее смещение */; 
  AMEASURE_TYPE_ID INTEGER:=49984 /* Гидронивелиры */; 
  AROUTE_ID1 INTEGER:=50028 /* Галерея №1 */; 
  AROUTE_ID2 INTEGER:=50029 /* Галерея №2 */; 
  CUR SYS_REFCURSOR; 
BEGIN 
  SELECT FIRST_MIN_VALUE, FIRST_MAX_VALUE, SECOND_MIN_VALUE, SECOND_MAX_VALUE,  
         FIRST_MODULO, SECOND_MODULO 
    INTO FIRST_MIN_VALUE, FIRST_MAX_VALUE, SECOND_MIN_VALUE, SECOND_MAX_VALUE,  
         FIRST_MODULO, SECOND_MODULO  
 FROM CRITERIAS  
   WHERE CRITERIA_ID=CRITERIA_INTENSITY_DRAFT.CRITERIA_ID; 
    
  IF (PERIOD=0) THEN 
 
    ADATE_BEGIN:=DATE_BEGIN; 
    IF (ADATE_BEGIN IS NULL) THEN 
   SELECT MIN(DATE_OBSERVATION) INTO ADATE_BEGIN 
     FROM JOURNAL_OBSERVATIONS 
    WHERE PARAM_ID=APARAM_ID  
      AND MEASURE_TYPE_ID=AMEASURE_TYPE_ID  
   AND POINT_ID IN (SELECT POINT_ID FROM ROUTE_POINTS WHERE ROUTE_ID IN (AROUTE_ID1,AROUTE_ID2));   
 END IF; 
 
    ADATE_END:=DATE_END; 
    IF (ADATE_END IS NULL) THEN 
   SELECT MAX(DATE_OBSERVATION) INTO ADATE_END 
     FROM JOURNAL_OBSERVATIONS 
    WHERE PARAM_ID=APARAM_ID  
      AND MEASURE_TYPE_ID=AMEASURE_TYPE_ID  
   AND POINT_ID IN (SELECT POINT_ID FROM ROUTE_POINTS WHERE ROUTE_ID IN (AROUTE_ID1,AROUTE_ID2)); 
 END IF; 
  
 IF (ADATE_BEGIN IS NOT NULL) AND (ADATE_END IS NOT NULL) THEN 
       
   FLAG:=0; 
   OPEN CUR FOR 'SELECT JO.POINT_ID, JO.DATE_OBSERVATION, JO.CYCLE_ID, '||  
                       'SUM(JO.VALUE) OVER (PARTITION BY JO.POINT_ID ORDER BY C.CYCLE_NUM '||  
                                 'ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS VALUE '|| 
                 'FROM JOURNAL_OBSERVATIONS JO, CYCLES C '|| 
                   'WHERE JO.CYCLE_ID=C.CYCLE_ID '|| 
         'AND JO.PARAM_ID=:1 '|| 
                     'AND JO.MEASURE_TYPE_ID=:2 '|| 
                     'AND JO.POINT_ID IN (SELECT POINT_ID FROM ROUTE_POINTS WHERE ROUTE_ID IN (:3,:4)) '|| 
             'AND JO.DATE_OBSERVATION>=:5 AND JO.DATE_OBSERVATION<=:6 '|| 
         'AND JO.VALUE<=:7 '|| 
                   'ORDER BY JO.DATE_OBSERVATION'   
          USING APARAM_ID, AMEASURE_TYPE_ID, AROUTE_ID1, AROUTE_ID2, ADATE_BEGIN, ADATE_END, FIRST_MIN_VALUE; 
 
   LOOP 
     FETCH CUR INTO RET.POINT_ID, RET.DATE_OBSERVATION, RET.CYCLE_ID, RET.VALUE; 
     EXIT WHEN CUR%NOTFOUND; 
  FLAG:=1; 
        IF (RET.VALUE<=SECOND_MIN_VALUE) THEN 
    RET.STATE:=3; 
  ELSE 
          RET.STATE:=2;        
  END IF;        
     PIPE ROW (RET); 
   END LOOP; 
    
   CLOSE CUR; 
    
   IF (FLAG=0) THEN 
    
       OPEN CUR FOR 'SELECT T.* '|| 
                 'FROM (SELECT T.POINT_ID, T.DATE_OBSERVATION, T.CYCLE_ID, MIN(T.VALUE) AS VALUE '|| 
                'FROM (SELECT JO.POINT_ID, JO.DATE_OBSERVATION, JO.CYCLE_ID, '|| 
                             'SUM(JO.VALUE) OVER (PARTITION BY JO.POINT_ID ORDER BY C.CYCLE_NUM '||  
                                    'ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS VALUE '|| 
                                      'FROM JOURNAL_OBSERVATIONS JO, CYCLES C '|| 
                                      'WHERE JO.CYCLE_ID=C.CYCLE_ID '|| 
                            'AND JO.PARAM_ID=:1 '|| 
                                        'AND JO.MEASURE_TYPE_ID=:2 '|| 
                                        'AND JO.POINT_ID IN (SELECT POINT_ID FROM ROUTE_POINTS WHERE ROUTE_ID IN (:3,:4)) '|| 
                               'AND JO.DATE_OBSERVATION>=:5 AND JO.DATE_OBSERVATION<=:6 '|| 
                            'AND JO.VALUE>:7 '|| 
            'ORDER BY JO.DATE_OBSERVATION) T '||    
                     'GROUP BY T.POINT_ID, T.DATE_OBSERVATION, T.CYCLE_ID) T '|| 
       'ORDER BY T.VALUE ASC'   
            USING APARAM_ID, AMEASURE_TYPE_ID, AROUTE_ID1, AROUTE_ID2, ADATE_BEGIN, ADATE_END, FIRST_MIN_VALUE; 
 
        LOOP 
       FETCH CUR INTO RET.POINT_ID, RET.DATE_OBSERVATION, RET.CYCLE_ID, RET.VALUE; 
    RET.STATE:=1; 
    PIPE ROW (RET); 
         EXIT; 
     END LOOP; 
     
     CLOSE CUR; 
    
   END IF; 
    
 END IF;           
 
  ELSE 
 
    ACYCLE_MIN:=CYCLE_MIN; 
    IF (ACYCLE_MIN IS NULL) THEN 
   SELECT MIN(C.CYCLE_NUM) INTO ACYCLE_MIN 
     FROM JOURNAL_OBSERVATIONS JO, CYCLES C 
    WHERE JO.CYCLE_ID=C.CYCLE_ID 
      AND JO.PARAM_ID=APARAM_ID 
         AND JO.MEASURE_TYPE_ID=AMEASURE_TYPE_ID 
         AND JO.POINT_ID IN (SELECT POINT_ID FROM ROUTE_POINTS WHERE ROUTE_ID IN (AROUTE_ID1,AROUTE_ID2));   
 END IF; 
 
    ACYCLE_MAX:=CYCLE_MAX; 
    IF (ACYCLE_MAX IS NULL) THEN 
   SELECT MAX(C.CYCLE_NUM) INTO ACYCLE_MAX 
     FROM JOURNAL_OBSERVATIONS JO, CYCLES C 
    WHERE JO.CYCLE_ID=C.CYCLE_ID 
      AND JO.PARAM_ID=APARAM_ID 
         AND JO.MEASURE_TYPE_ID=AMEASURE_TYPE_ID 
         AND JO.POINT_ID IN (SELECT POINT_ID FROM ROUTE_POINTS WHERE ROUTE_ID IN (AROUTE_ID1,AROUTE_ID2));   
 END IF; 
  
 IF (ACYCLE_MIN IS NOT NULL) AND (ACYCLE_MAX IS NOT NULL) THEN 
       
   FLAG:=0; 
   OPEN CUR FOR 'SELECT JO.POINT_ID, JO.DATE_OBSERVATION, JO.CYCLE_ID, '||  
                       'SUM(JO.VALUE) OVER (PARTITION BY JO.POINT_ID ORDER BY C.CYCLE_NUM '||  
                                 'ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS VALUE '|| 
                 'FROM JOURNAL_OBSERVATIONS JO, CYCLES C '|| 
                   'WHERE JO.CYCLE_ID=C.CYCLE_ID '|| 
         'AND JO.PARAM_ID=:1 '|| 
                     'AND JO.MEASURE_TYPE_ID=:2 '|| 
                     'AND JO.POINT_ID IN (SELECT POINT_ID FROM ROUTE_POINTS WHERE ROUTE_ID IN (:3,:4)) '|| 
             'AND C.CYCLE_NUM>=:5 AND C.CYCLE_NUM<=:6 '|| 
         'AND JO.VALUE<=:7 '|| 
                   'ORDER BY JO.DATE_OBSERVATION'   
          USING APARAM_ID, AMEASURE_TYPE_ID, AROUTE_ID1, AROUTE_ID2, ACYCLE_MIN, ACYCLE_MAX, FIRST_MIN_VALUE; 
 
   LOOP 
     FETCH CUR INTO RET.POINT_ID, RET.DATE_OBSERVATION, RET.CYCLE_ID, RET.VALUE; 
     EXIT WHEN CUR%NOTFOUND; 
  FLAG:=1; 
        IF (RET.VALUE<=SECOND_MIN_VALUE) THEN 
    RET.STATE:=3; 
  ELSE 
          RET.STATE:=2;        
  END IF;        
     PIPE ROW (RET); 
   END LOOP; 
    
   CLOSE CUR; 
    
   IF (FLAG=0) THEN 
    
       OPEN CUR FOR 'SELECT T.* '|| 
                 'FROM (SELECT T.POINT_ID, T.DATE_OBSERVATION, T.CYCLE_ID, MIN(T.VALUE) AS VALUE '|| 
                'FROM (SELECT JO.POINT_ID, JO.DATE_OBSERVATION, JO.CYCLE_ID, '|| 
                             'SUM(JO.VALUE) OVER (PARTITION BY JO.POINT_ID ORDER BY C.CYCLE_NUM '||  
                                    'ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS VALUE '|| 
                                      'FROM JOURNAL_OBSERVATIONS JO, CYCLES C '|| 
                                      'WHERE JO.CYCLE_ID=C.CYCLE_ID '|| 
                            'AND JO.PARAM_ID=:1 '|| 
                                        'AND JO.MEASURE_TYPE_ID=:2 '|| 
                                        'AND JO.POINT_ID IN (SELECT POINT_ID FROM ROUTE_POINTS WHERE ROUTE_ID IN (:3,:4)) '|| 
                                'AND C.CYCLE_NUM>=:5 AND C.CYCLE_NUM<=:6 '|| 
                            'AND JO.VALUE>:7 '|| 
            'ORDER BY JO.DATE_OBSERVATION) T '||    
                     'GROUP BY T.POINT_ID, T.DATE_OBSERVATION, T.CYCLE_ID) T '|| 
       'ORDER BY T.VALUE ASC'   
            USING APARAM_ID, AMEASURE_TYPE_ID, AROUTE_ID1, AROUTE_ID2, ACYCLE_MIN, ACYCLE_MAX, FIRST_MIN_VALUE; 
 
        LOOP 
       FETCH CUR INTO RET.POINT_ID, RET.DATE_OBSERVATION, RET.CYCLE_ID, RET.VALUE; 
    RET.STATE:=1; 
    PIPE ROW (RET); 
         EXIT; 
     END LOOP; 
     
     CLOSE CUR; 
    
   END IF; 
    
 END IF;           
     
  END IF;   
 
  RETURN;  
END;

--

/* Фиксация изменений */

COMMIT